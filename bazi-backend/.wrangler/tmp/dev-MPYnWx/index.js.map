{
  "version": 3,
  "sources": ["../bundle-zmDFkT/checked-fetch.js", "../bundle-zmDFkT/strip-cf-connecting-ip-header.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-zmDFkT/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-zmDFkT/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/.wrangler/tmp/dev-MPYnWx",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "function base64Encode(bytes) {\n  return btoa(String.fromCharCode(...bytes)).replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nfunction base64Decode(str) {\n  str = str.replace(/-/g, '+').replace(/_/g, '/');\n  while (str.length % 4) str += '=';\n  return Uint8Array.from(atob(str), c => c.charCodeAt(0));\n}\n\n// \u6CE8\u610F\uFF1AJWT_SECRET \u5E94\u4ECE\u73AF\u5883\u53D8\u91CF\u83B7\u53D6\uFF0C\u6B64\u5904\u4EC5\u4F5C\u4E3A\u672C\u5730\u5F00\u53D1\u5907\u7528\nconst JWT_SECRET = 'placeholder_for_local_dev_only';\n\n// \u2705 \u751F\u6210 JWT\nfunction generateJWT(payload, secret) {\n  const header = { alg: 'HS256', typ: 'JWT' };\n  const encodedHeader = base64Encode(new TextEncoder().encode(JSON.stringify(header)));\n  const encodedPayload = base64Encode(new TextEncoder().encode(JSON.stringify(payload)));\n  const signature = base64Encode(new TextEncoder().encode(`${encodedHeader}.${encodedPayload}.${secret}`));  // \u7B80\u5316\u7B7E\u540D\u65B9\u5F0F\uFF08\u6F14\u793A\u7528\uFF09\n  return `${encodedHeader}.${encodedPayload}.${signature}`;\n}\n\n// \u2705 \u9A8C\u8BC1 JWT\nfunction verifyJWT(token, secret) {\n  try {\n    const [encodedHeader, encodedPayload, signature] = token.split('.');\n    const expectedSignature = base64Encode(new TextEncoder().encode(`${encodedHeader}.${encodedPayload}.${secret}`));\n    if (signature !== expectedSignature) {\n      console.log('JWT \u7B7E\u540D\u4E0D\u5339\u914D');\n      return null;\n    }\n    const payloadStr = new TextDecoder().decode(base64Decode(encodedPayload));\n    return JSON.parse(payloadStr);\n  } catch (err) {\n    console.log('JWT \u9A8C\u8BC1\u9519\u8BEF:', err.message);\n    return null;\n  }\n}\n\nasync function hashPassword(password) {\n  const hash = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(password));\n  return Array.from(new Uint8Array(hash)).map(b => b.toString(16).padStart(2, '0')).join('');\n}\n\nasync function sendResetEmail(toEmail, emailContent, env) {\n  const payload = {\n    sender: {\n      email: \"owenjass@gmail.com\",\n      name: \"\u9EA6\u516B\u5B57\"\n    },\n    to: [{\n      email: toEmail\n    }],\n    subject: \"\u91CD\u8BBE\u4F60\u7684\u5BC6\u7801\",\n    textContent: emailContent,\n  };\n\n  const res = await fetch(\"https://api.brevo.com/v3/smtp/email\", {\n    method: \"POST\",\n    headers: {\n      \"api-key\": env.SENDINBLUE_API_KEY,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n\n  if (!res.ok) {\n    const text = await res.text();\n    throw new Error(`SendinBlue \u9519\u8BEF\uFF1A${res.status} - ${text}`);\n  }\n}\n\n// \u521B\u5EFA D1 \u4F1A\u8BDD\nasync function createD1Session(env) {\n  try {\n    // \u5728\u672C\u5730\u73AF\u5883\u4E2D\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6A21\u62DF\u7684\u4F1A\u8BDD\u4EE4\u724C\n    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      console.log('Using mock D1 session token for local development');\n      return 'mock_session_token_for_local_dev';\n    }\n    \n    // \u5728\u751F\u4EA7\u73AF\u5883\u4E2D\uFF0C\u6B63\u5E38\u521B\u5EFAD1\u4F1A\u8BDD\n    const response = await fetch(`https://api.cloudflare.com/client/v4/accounts/${env.ACCOUNT_ID}/d1/database/${env.DATABASE_ID}/query/session`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${env.API_TOKEN}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: 'read-replica-session',\n        expires_at: new Date(Date.now() + 3600 * 1000).toISOString() // 1\u5C0F\u65F6\u540E\u8FC7\u671F\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to create session: ${response.status}`);\n    }\n\n    const data = await response.json();\n    return data.result.session_token;\n  } catch (error) {\n    console.error('Error creating D1 session:', error);\n    throw error;\n  }\n}\n\nexport default {\n  async fetch(request, env, ctx) {\n    // \u521B\u5EFA D1 \u8BFB\u526F\u672C\u4F1A\u8BDD\n    let db = env.DB; // \u9ED8\u8BA4\u4F7F\u7528\u4E3B\u6570\u636E\u5E93\n    const sessionToken = await createD1Session(env).catch(() => null);\n    if (sessionToken) {\n      db = env.DB.withSession(sessionToken); // \u4F7F\u7528\u8BFB\u526F\u672C\n    }\n\n    const { method } = request;\n    const url = new URL(request.url);\n\n    const corsHeaders = {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Allow-Credentials': 'true'\n    };\n\n    if (method === 'OPTIONS') {\n      return new Response(null, { status: 204, headers: corsHeaders });\n    }\n\n    // \u6CE8\u518C\u63A5\u53E3\n    if (url.pathname === '/api/register' && method === 'POST') {\n      const { name, email, password } = await request.json();\n\n      // \u68C0\u67E5\u7528\u6237\u540D\u6216\u90AE\u7BB1\u662F\u5426\u5DF2\u5B58\u5728\n      const existingUser = await db.prepare(`SELECT * FROM users WHERE name = ? OR email = ?`)\n        .bind(name, email).first();\n      if (existingUser) {\n        return new Response(JSON.stringify({ error: '\u7528\u6237\u540D\u6216\u90AE\u7BB1\u5DF2\u88AB\u4F7F\u7528' }), {\n          status: 409,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n\n      const hashed = await hashPassword(password);\n      const createdAt = Date.now(); // \u4F7F\u7528\u65F6\u95F4\u6233\uFF08INTEGER \u7C7B\u578B\uFF09\n\n      await db.prepare(`\n        INSERT INTO users (name, email, password, created_at)\n        VALUES (?, ?, ?, ?)\n      `).bind(name, email, hashed, createdAt).run();\n\n      return new Response(JSON.stringify({ success: true }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    // \u767B\u5F55\u63A5\u53E3\n    if (url.pathname === '/api/login' && method === 'POST') {\n    const { name, password } = await request.json();\n    const hashed = await hashPassword(password);  // \u4F60\u539F\u672C\u7684\u52A0\u5BC6\u903B\u8F91\n\n    const user = await db.prepare(`SELECT * FROM users WHERE name = ?`).bind(name).first();\n    if (!user || user.password !== hashed) {\n      return new Response(JSON.stringify({ error: '\u7528\u6237\u540D\u6216\u5BC6\u7801\u9519\u8BEF' }), {\n        status: 401,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    const token = generateJWT({ id: user.id, name: user.name }, env.JWT_SECRET);\n    return new Response(JSON.stringify({ token }), {\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n  }\n\n    // \u8BF7\u6C42\u91CD\u8BBE\u5BC6\u7801\u63A5\u53E3\n    if (url.pathname === '/api/request-reset' && method === 'POST') {\n      const { email } = await request.json();\n      const user = await db.prepare(`SELECT * FROM users WHERE email = ?`).bind(email).first();\n      if (!user) {\n        // \u4E0D\u66B4\u9732\u662F\u5426\u5B58\u5728\n        return new Response(JSON.stringify({ success: true }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n      const token = generateJWT({ id: user.id, exp: Math.floor(Date.now() / 1000) + 600 }, env.JWT_SECRET); // 10\u5206\u949F\u6709\u6548\n      const link = `https://mybazi.net/system/reset.html?token=${token}`;\n      try {\n        // \u4FEE\u6539\u90AE\u4EF6\u5185\u5BB9\uFF0C\u5305\u542B\u7528\u6237\u540D\n        const emailContent = `\u5C0A\u656C\u7684 ${user.name}\uFF0C\\n\\n\u70B9\u51FB\u4EE5\u4E0B\u94FE\u63A5\u91CD\u8BBE\u4F60\u7684\u5BC6\u7801\uFF1A\\n\\n${link}\\n\\n\u94FE\u63A510\u5206\u949F\u5185\u6709\u6548\u3002`;\n        \n        await sendResetEmail(email, emailContent, env);\n        return new Response(JSON.stringify({ success: true }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      } catch (err) {\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u63D0\u4EA4\u65B0\u5BC6\u7801\u63A5\u53E3\n    if (url.pathname === '/api/reset-password' && method === 'POST') {\n      const { token, newPassword } = await request.json();\n      const payload = verifyJWT(token);\n      if (!payload || payload.exp < Math.floor(Date.now() / 1000)) {\n        return new Response(JSON.stringify({ error: '\u94FE\u63A5\u5DF2\u8FC7\u671F\u6216\u65E0\u6548' }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n      const hashed = await hashPassword(newPassword);\n      await db.prepare(`UPDATE users SET password = ? WHERE id = ?`).bind(hashed, payload.id).run();\n      return new Response(JSON.stringify({ success: true }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n\n    // \u83B7\u53D6\u7528\u6237\u4F59\u989D\u63A5\u53E3\n  if (url.pathname === '/api/users/balance' && method === 'GET') {\n    try {\n      const authHeader = request.headers.get('Authorization');\n      if (!authHeader?.startsWith('Bearer ')) {\n        return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { status: 401, headers: corsHeaders });\n      }\n\n      const token = authHeader.split(' ')[1];\n      const payload = verifyJWT(token, env.JWT_SECRET);\n      if (!payload || !payload.id) {\n        return new Response(JSON.stringify({ error: '\u65E0\u6548\u7684\u7528\u6237\u4FE1\u606F' }), { status: 401, headers: corsHeaders });\n      }\n\n      const user = await db.prepare(`SELECT balance FROM users WHERE id = ?`).bind(payload.id).first();\n      if (!user) {\n        return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { status: 404, headers: corsHeaders });\n      }\n\n      return new Response(JSON.stringify({ balance: user.balance }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    } catch (error) {\n      return new Response(JSON.stringify({ error: error.message }), {\n        status: 500,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n  }\n\n    // \u83B7\u53D6\u7528\u6237\u6BCF\u65E5\u4F7F\u7528\u6B21\u6570\u63A5\u53E3\n    if (url.pathname === '/api/user/daily-usage' && method === 'GET') {\n      try {\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401, \n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const user = await db.prepare(\n          `SELECT daily_usage_count, last_usage_date FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\u683C\u5F0F\n        let dailyUsageCount = user.daily_usage_count || 0;\n        \n        // \u5982\u679C\u4E0D\u662F\u4ECA\u5929\uFF0C\u91CD\u7F6E\u4F7F\u7528\u6B21\u6570\n        if (user.last_usage_date !== today) {\n          dailyUsageCount = 0;\n          await db.prepare(\n            `UPDATE users SET daily_usage_count = 0, last_usage_date = ? WHERE id = ?`\n          ).bind(today, payload.id).run();\n        }\n\n        return new Response(JSON.stringify({ \n          dailyUsageCount,\n          lastUsageDate: today\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u83B7\u53D6\u6BCF\u65E5\u4F7F\u7528\u6B21\u6570\u9519\u8BEF:', error);\n        return new Response(JSON.stringify({ \n          error: '\u83B7\u53D6\u4F7F\u7528\u6B21\u6570\u5931\u8D25',\n          message: error.message \n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u66F4\u65B0\u7528\u6237\u6BCF\u65E5\u4F7F\u7528\u6B21\u6570\u63A5\u53E3\n    if (url.pathname === '/api/user/update-daily-usage' && method === 'POST') {\n      try {\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const { dailyUsageCount } = await request.json();\n        if (typeof dailyUsageCount !== 'number' || dailyUsageCount < 0) {\n          return new Response(JSON.stringify({ error: '\u4F7F\u7528\u6B21\u6570\u65E0\u6548' }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD\u683C\u5F0F\n        \n        const result = await db.prepare(\n          `UPDATE users SET daily_usage_count = ?, last_usage_date = ? WHERE id = ?`\n        ).bind(dailyUsageCount, today, payload.id).run();\n\n        if (!result.success) {\n          throw new Error('\u6570\u636E\u5E93\u66F4\u65B0\u5931\u8D25');\n        }\n\n        return new Response(JSON.stringify({ \n          success: true,\n          dailyUsageCount,\n          lastUsageDate: today,\n          message: '\u4F7F\u7528\u6B21\u6570\u66F4\u65B0\u6210\u529F'\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u66F4\u65B0\u6BCF\u65E5\u4F7F\u7528\u6B21\u6570\u9519\u8BEF:', error);\n        return new Response(JSON.stringify({ \n          success: false,\n          error: '\u66F4\u65B0\u4F7F\u7528\u6B21\u6570\u5931\u8D25',\n          message: error.message \n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u7528\u6237\u6263\u8D39\u63A5\u53E3\n    if (url.pathname === '/api/user/deduct' && method === 'POST') {\n\n    // \u4F59\u989D\u652F\u4ED8\u63A5\u53E3\n    if (url.pathname === '/api/pay_with_balance' && method === 'POST') {\n      try {\n        // 1. \u9A8C\u8BC1\u8BF7\u6C42\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const { amount, service } = await request.json();\n        if (!amount || amount <= 0 || !service) {\n          return new Response(JSON.stringify({ error: '\u53C2\u6570\u65E0\u6548' }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 2. \u68C0\u67E5\u7528\u6237\u4F59\u989D\n        const user = await db.prepare(\n          `SELECT id, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        if (user.balance < amount) {\n          return new Response(JSON.stringify({ \n            error: '\u4F59\u989D\u4E0D\u8DB3',\n            currentBalance: user.balance,\n            requiredAmount: amount\n          }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 3. \u751F\u6210\u4EA4\u6613ID\n        const transactionId = crypto.randomUUID();\n        const timestamp = Math.floor(Date.now() / 1000);\n\n        // 4. \u6267\u884C\u6263\u8D39\u64CD\u4F5C\n        const batchResult = await db.batch([\n          db.prepare(\n            `UPDATE users SET balance = balance - ? WHERE id = ?`\n          ).bind(amount, payload.id),\n          \n          db.prepare(\n            `INSERT INTO transactions \n            (id, user_id, amount, type, status, description, created_at)\n            VALUES (?, ?, ?, 'deduct', 'completed', ?, ?)`\n          ).bind(\n            transactionId,\n            payload.id,\n            amount,\n            `\u670D\u52A1\u6263\u8D39: ${service}`,\n            timestamp\n          )\n        ]);\n\n        // 5. \u68C0\u67E5\u6279\u91CF\u64CD\u4F5C\u7ED3\u679C\n        if (!batchResult.every(r => r.success)) {\n          console.error('\u6263\u8D39\u6279\u91CF\u64CD\u4F5C\u5931\u8D25:', batchResult);\n          throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n        }\n\n        // 6. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u4F59\u989D\n        const updatedUser = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          transactionId,\n          newBalance: updatedUser.balance,\n          message: '\u652F\u4ED8\u6210\u529F'\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u652F\u4ED8\u9519\u8BEF:', error);\n        \n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u652F\u4ED8\u5904\u7406\u5931\u8D25',\n          message: '\u7CFB\u7EDF\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n      try {\n        // 1. \u9A8C\u8BC1\u8BF7\u6C42\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const { amount, reason } = await request.json();\n        if (!amount || amount <= 0) {\n          return new Response(JSON.stringify({ error: '\u6263\u8D39\u91D1\u989D\u65E0\u6548' }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 2. \u68C0\u67E5\u7528\u6237\u4F59\u989D\n        const user = await db.prepare(\n          `SELECT id, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        if (user.balance < amount) {\n          return new Response(JSON.stringify({ \n            error: '\u4F59\u989D\u4E0D\u8DB3',\n            currentBalance: user.balance,\n            requiredAmount: amount\n          }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 3. \u751F\u6210\u4EA4\u6613ID\n        const transactionId = crypto.randomUUID();\n        const timestamp = Math.floor(Date.now() / 1000);\n\n        // 4. \u6267\u884C\u6263\u8D39\u64CD\u4F5C\n        const batchResult = await db.batch([\n          db.prepare(\n            `UPDATE users SET balance = balance - ? WHERE id = ?`\n          ).bind(amount, payload.id),\n          \n          db.prepare(\n            `INSERT INTO transactions \n            (id, user_id, amount, type, status, description, created_at)\n            VALUES (?, ?, ?, 'deduct', 'completed', ?, ?)`\n          ).bind(\n            transactionId,\n            payload.id,\n            amount,\n            reason || 'AI\u89E3\u5366\u5206\u6790',\n            timestamp\n          )\n        ]);\n\n        // 5. \u68C0\u67E5\u6279\u91CF\u64CD\u4F5C\u7ED3\u679C\n        if (!batchResult.every(r => r.success)) {\n          console.error('\u6263\u8D39\u6279\u91CF\u64CD\u4F5C\u5931\u8D25:', batchResult);\n          throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n        }\n\n        // 6. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u4F59\u989D\n        const updatedUser = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          transactionId,\n          newBalance: updatedUser.balance,\n          message: '\u6263\u8D39\u6210\u529F'\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u6263\u8D39\u9519\u8BEF:', error);\n        \n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u6263\u8D39\u5904\u7406\u5931\u8D25',\n          message: '\u7CFB\u7EDF\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n     }\n\n    // \u7528\u6237\u9000\u6B3E\u63A5\u53E3\n    if (url.pathname === '/api/user/refund' && method === 'POST') {\n      try {\n        // 1. \u9A8C\u8BC1\u8BF7\u6C42\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const { amount, reason } = await request.json();\n        if (!amount || amount <= 0) {\n          return new Response(JSON.stringify({ error: '\u9000\u6B3E\u91D1\u989D\u65E0\u6548' }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 2. \u68C0\u67E5\u7528\u6237\u662F\u5426\u5B58\u5728\n        const user = await db.prepare(\n          `SELECT id, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 3. \u751F\u6210\u4EA4\u6613ID\n        const transactionId = crypto.randomUUID();\n        const timestamp = Math.floor(Date.now() / 1000);\n\n        // 4. \u6267\u884C\u9000\u6B3E\u64CD\u4F5C\n        const batchResult = await db.batch([\n          db.prepare(\n            `UPDATE users SET balance = balance + ? WHERE id = ?`\n          ).bind(amount, payload.id),\n          \n          db.prepare(\n            `INSERT INTO transactions \n            (id, user_id, amount, type, status, description, created_at)\n            VALUES (?, ?, ?, 'refund', 'completed', ?, ?)`\n          ).bind(\n            transactionId,\n            payload.id,\n            amount,\n            reason || 'AI\u89E3\u5366\u5206\u6790\u5931\u8D25\u9000\u6B3E',\n            timestamp\n          )\n        ]);\n\n        // 5. \u68C0\u67E5\u6279\u91CF\u64CD\u4F5C\u7ED3\u679C\n        if (!batchResult.every(r => r.success)) {\n          console.error('\u9000\u6B3E\u6279\u91CF\u64CD\u4F5C\u5931\u8D25:', batchResult);\n          throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n        }\n\n        // 6. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u4F59\u989D\n        const updatedUser = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          transactionId,\n          newBalance: updatedUser.balance,\n          message: '\u9000\u6B3E\u6210\u529F'\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u9000\u6B3E\u9519\u8BEF:', error);\n        \n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u9000\u6B3E\u5904\u7406\u5931\u8D25',\n          message: '\u7CFB\u7EDF\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n     }\n\n    // \u7528\u6237\u5145\u503C\u63A5\u53E3\n    if (url.pathname === '/api/user/recharge' && method === 'POST') {\n      try {\n        // 1. \u9A8C\u8BC1\u8BF7\u6C42\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        const { amount, paymentMethod } = await request.json();\n        if (!amount || amount <= 0) {\n          return new Response(JSON.stringify({ error: '\u5145\u503C\u91D1\u989D\u65E0\u6548' }), { \n            status: 400,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 2. \u68C0\u67E5\u7528\u6237\u662F\u5426\u5B58\u5728\n        const user = await db.prepare(\n          `SELECT id, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (!user) {\n          return new Response(JSON.stringify({ error: '\u7528\u6237\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // 3. \u751F\u6210\u4EA4\u6613ID\u548C\u8BA2\u5355ID\n        const transactionId = crypto.randomUUID();\n        const orderId = `R${Date.now()}${Math.floor(Math.random() * 1000000)}`;\n        const timestamp = Math.floor(Date.now() / 1000);\n\n        // 4. \u6267\u884C\u5145\u503C\u64CD\u4F5C\uFF08\u7B80\u5316\u7248\uFF0C\u5B9E\u9645\u5E94\u8BE5\u5148\u521B\u5EFA\u8BA2\u5355\uFF0C\u652F\u4ED8\u6210\u529F\u540E\u518D\u66F4\u65B0\u4F59\u989D\uFF09\n        const batchResult = await db.batch([\n          db.prepare(\n            `UPDATE users SET balance = balance + ? WHERE id = ?`\n          ).bind(amount, payload.id),\n          \n          db.prepare(\n            `INSERT INTO transactions \n            (id, user_id, amount, type, status, description, created_at)\n            VALUES (?, ?, ?, 'recharge', 'completed', ?, ?)`\n          ).bind(\n            transactionId,\n            payload.id,\n            amount,\n            `\u8D26\u6237\u5145\u503C - ${paymentMethod || '\u672A\u77E5\u652F\u4ED8\u65B9\u5F0F'}`,\n            timestamp\n          ),\n          \n          db.prepare(\n            `INSERT INTO recharge_orders \n            (order_id, user_id, amount, payment_method, status, created_at)\n            VALUES (?, ?, ?, ?, 'completed', ?)`\n          ).bind(\n            orderId,\n            payload.id,\n            amount,\n            paymentMethod || 'unknown',\n            timestamp\n          )\n        ]);\n\n        // 5. \u68C0\u67E5\u6279\u91CF\u64CD\u4F5C\u7ED3\u679C\n        if (!batchResult.every(r => r.success)) {\n          console.error('\u5145\u503C\u6279\u91CF\u64CD\u4F5C\u5931\u8D25:', batchResult);\n          throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n        }\n\n        // 6. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u4F59\u989D\n        const updatedUser = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          transactionId,\n          orderId,\n          newBalance: updatedUser.balance,\n          message: '\u5145\u503C\u6210\u529F'\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (error) {\n        console.error('\u5145\u503C\u9519\u8BEF:', error);\n        \n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u5145\u503C\u5904\u7406\u5931\u8D25',\n          message: '\u7CFB\u7EDF\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n        }), { \n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u4F59\u989D\u652F\u4ED8\u63A5\u53E3\n    if (url.pathname === '/api/payments/balance' && method === 'POST') {\n      try {\n        // 1. \u9A8C\u8BC1\u8BF7\u6C42\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { \n            status: 401,\n            headers: corsHeaders \n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload?.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), { \n            status: 401,\n            headers: corsHeaders \n          });\n        }\n\n        const { wishId, amount } = await request.json();\n        if (!wishId || !amount) {\n          return new Response(JSON.stringify({ error: '\u53C2\u6570\u7F3A\u5931' }), { \n            status: 400,\n            headers: corsHeaders \n          });\n        }\n\n        // 2. \u68C0\u67E5\u613F\u671B\u72B6\u6001\uFF08\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\uFF09\n        const wish = await db.prepare(\n          `SELECT id, user_id FROM wishes WHERE id = ?`\n        ).bind(wishId).first();\n        \n        if (!wish) {\n          return new Response(JSON.stringify({ error: '\u613F\u671B\u4E0D\u5B58\u5728' }), { \n            status: 404,\n            headers: corsHeaders \n          });\n        }\n        \n        // \u79FB\u9664\u5BF9\u613F\u671B\u662F\u5426\u5DF2\u8FD8\u613F\u7684\u68C0\u67E5\uFF0C\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\n\n        // 3. \u68C0\u67E5\u7528\u6237\u4F59\u989D\n        const user = await db.prepare(\n          `SELECT id, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        if (user.balance < amount) {\n          return new Response(JSON.stringify({ \n            error: '\u4F59\u989D\u4E0D\u8DB3',\n            currentBalance: user.balance,\n            requiredAmount: amount\n          }), { \n            status: 400,\n            headers: corsHeaders \n          });\n        }\n\n        // 4. \u751F\u6210\u4EA4\u6613ID\n        const transactionId = crypto.randomUUID();\n        const timestamp = Math.floor(Date.now() / 1000);\n\n        // 5. \u4F7F\u7528\u6279\u91CF\u64CD\u4F5C\u6267\u884C\u652F\u4ED8\uFF08\u66FF\u4EE3\u4E8B\u52A1\uFF09- \u5141\u8BB8\u591A\u6B21\u8FD8\u613F\n        const batchResult = await db.batch([\n          db.prepare(\n            `UPDATE users SET balance = balance - ? WHERE id = ?`\n          ).bind(amount, payload.id),\n          \n          db.prepare(\n            `INSERT INTO transactions \n            (id, user_id, amount, type, status, description, created_at)\n            VALUES (?, ?, ?, 'fulfillment', 'completed', ?, ?)`\n          ).bind(\n            transactionId,\n            payload.id,\n            amount,\n            `\u613F\u671B\u8FD8\u613F\u652F\u4ED8 - \u613F\u671BID: ${wishId}`,\n            timestamp\n          ),\n          \n          db.prepare(\n            `INSERT INTO fulfillments \n            (wish_id, user_id, amount, payment_method, transaction_id, created_at)\n            VALUES (?, ?, ?, 'balance', ?, ?)`\n          ).bind(\n            wishId,\n            payload.id,\n            amount,\n            transactionId,\n            timestamp\n          )\n          // \u79FB\u9664\u66F4\u65B0\u613F\u671B\u72B6\u6001\u7684\u64CD\u4F5C\uFF0C\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\n        ]);\n\n        // 6. \u68C0\u67E5\u6279\u91CF\u64CD\u4F5C\u7ED3\u679C\n        if (!batchResult.every(r => r.success)) {\n          console.error('\u6279\u91CF\u64CD\u4F5C\u5931\u8D25:', batchResult);\n          throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n        }\n\n        // 7. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u4F59\u989D\n        const updatedUser = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n\n        return new Response(JSON.stringify({\n          success: true,\n          transactionId,\n          newBalance: updatedUser.balance,\n          message: '\u652F\u4ED8\u6210\u529F'\n        }), {\n          headers: corsHeaders\n        });\n\n      } catch (error) {\n        console.error('\u4F59\u989D\u652F\u4ED8\u9519\u8BEF:', error);\n        \n        // \u5982\u679C\u662F\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25\uFF0C\u8FD4\u56DE500\u9519\u8BEF\n        if (error.message === '\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25') {\n          return new Response(JSON.stringify({\n            success: false,\n            error: '\u652F\u4ED8\u5904\u7406\u5931\u8D25',\n            message: '\u7CFB\u7EDF\u7E41\u5FD9\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n          }), { \n            status: 500,\n            headers: corsHeaders \n          });\n        }\n        \n        // \u5176\u4ED6\u672A\u9884\u671F\u7684\u9519\u8BEF\u4E5F\u8FD4\u56DE500\n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u652F\u4ED8\u5904\u7406\u5931\u8D25',\n          message: '\u7CFB\u7EDF\u5F02\u5E38\uFF0C\u8BF7\u7A0D\u540E\u91CD\u8BD5'\n        }), { \n          status: 500,\n          headers: corsHeaders \n        });\n      }\n    }\n\n    // \u68C0\u67E5\u613F\u671B\u72B6\u6001\u63A5\u53E3\n    if (url.pathname === '/api/wishes/status' && method === 'GET') {\n      try {\n        // 1. \u9A8C\u8BC1JWT\u4EE4\u724C\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u63D0\u4F9B\u8BA4\u8BC1\u4EE4\u724C' }), { \n            status: 401,\n            headers: corsHeaders \n          });\n        }\n\n        const token = authHeader.substring(7);\n        const payload = verifyJWT(token, JWT_SECRET);\n        if (!payload) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u7684\u8BA4\u8BC1\u4EE4\u724C' }), { \n            status: 401,\n            headers: corsHeaders \n          });\n        }\n\n        // 2. \u83B7\u53D6\u613F\u671BID\n        const wishId = url.searchParams.get('wishId');\n        if (!wishId) {\n          return new Response(JSON.stringify({ error: '\u7F3A\u5C11\u613F\u671BID\u53C2\u6570' }), { \n            status: 400,\n            headers: corsHeaders \n          });\n        }\n\n        // 3. \u67E5\u8BE2\u613F\u671B\u72B6\u6001\n        const wish = await db.prepare(\n          `SELECT id, user_id, is_fulfilled FROM wishes WHERE id = ?`\n        ).bind(wishId).first();\n        \n        if (!wish) {\n          return new Response(JSON.stringify({ \n            exists: false,\n            fulfilled: false\n          }), { \n            headers: corsHeaders \n          });\n        }\n        \n        return new Response(JSON.stringify({\n          exists: true,\n          fulfilled: !!wish.is_fulfilled,\n          wishId: wish.id\n        }), {\n          headers: corsHeaders\n        });\n\n      } catch (error) {\n        console.error('\u68C0\u67E5\u613F\u671B\u72B6\u6001\u9519\u8BEF:', error);\n        return new Response(JSON.stringify({\n          error: '\u68C0\u67E5\u613F\u671B\u72B6\u6001\u5931\u8D25',\n          message: error.message\n        }), { \n          status: 500,\n          headers: corsHeaders \n        });\n      }\n    }\n\n  // \u5145\u503C\u5B8C\u6210\u63A5\u53E3\n  if (url.pathname === '/api/recharge/complete' && method === 'GET') {\n    const orderId = new URL(request.url).searchParams.get('orderId');\n    \n    // 1. \u9A8C\u8BC1\u8BA2\u5355\u72B6\u6001\n    const order = await db.prepare(`SELECT * FROM recharge_orders WHERE order_id = ?`).bind(orderId).first();\n    if (!order) {\n      return new Response(JSON.stringify({ error: '\u8BA2\u5355\u65E0\u6548' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n    \n    // \u68C0\u67E5\u8BA2\u5355\u72B6\u6001\n    if (order.status === 'completed') {\n      // \u8BA2\u5355\u5DF2\u5B8C\u6210\uFF0C\u76F4\u63A5\u8FD4\u56DE\u6210\u529F\n      return new Response(JSON.stringify({ success: true }), {\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    } else if (order.status !== 'pending' && order.status !== 'paid') {\n      // \u8BA2\u5355\u72B6\u6001\u4E0D\u662Fpending\u6216paid\uFF0C\u8FD4\u56DE\u9519\u8BEF\n      return new Response(JSON.stringify({ error: '\u8BA2\u5355\u72B6\u6001\u65E0\u6548' }), {\n        status: 400,\n        headers: { 'Content-Type': 'application/json', ...corsHeaders }\n      });\n    }\n    \n    // 2. \u66F4\u65B0\u8BA2\u5355\u72B6\u6001\n    await db.prepare(`UPDATE recharge_orders SET status = 'completed' WHERE order_id = ?`).bind(orderId).run();\n    \n    // 3. \u5982\u679C\u8BA2\u5355\u72B6\u6001\u662Fpending\uFF0C\u5219\u66F4\u65B0\u7528\u6237\u4F59\u989D\n    if (order.status === 'pending') {\n      await db.prepare(`UPDATE users SET balance = balance + ? WHERE id = ?`).bind(order.amount, order.user_id).run();\n      \n      // 4. \u8BB0\u5F55\u4EA4\u6613\n      await db.prepare(`\n        INSERT INTO transactions (user_id, amount, type, description, order_id)\n        VALUES (?, ?, 'recharge', '\u8D26\u6237\u5145\u503C', ?)\n      `).bind(order.user_id, order.amount, orderId).run();\n      \n      // 5. \u8BB0\u5F55\u652F\u4ED8\u901A\u77E5\n      await db.prepare(`\n        INSERT INTO payment_notifications (order_id, amount, payment_method, status)\n        VALUES (?, ?, ?, 'completed')\n      `).bind(orderId, order.amount, order.payment_method).run();\n    }\n    \n    return new Response(JSON.stringify({ success: true }), {\n      headers: { 'Content-Type': 'application/json', ...corsHeaders }\n    });\n  }\n\n    // \u8BB8\u613F\u6C60\u63A5\u53E3\n    if (url.pathname === '/api/wishes') {\n      try {\n        if (method === 'POST') {\n          const data = await request.json();\n          const {\n            user_name, bazi, content, type, visibility,\n            birth_date, birth_time, user_id, solar_date\n          } = data;\n\n          await db.prepare(`\n            INSERT INTO wishes (user_name, bazi, content, type, visibility, birth_date, birth_time, user_id, solar_date)\n            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n          `).bind(user_name, bazi, content, type, visibility, birth_date, birth_time, user_id, solar_date).run();\n\n          return new Response(JSON.stringify({ success: true }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        if (method === 'GET') {\n          // \u83B7\u53D6\u67E5\u8BE2\u53C2\u6570\n          const visibility = url.searchParams.get('visibility');\n          const sort = url.searchParams.get('sort') || 'newest';\n          \n          let query = `SELECT * FROM wishes`;\n          let queryParams = [];\n          \n          if (visibility) {\n            query += ` WHERE visibility = ?`;\n            queryParams.push(visibility);\n          }\n          \n          let orderBy = 'ORDER BY id DESC';\n          \n          if (sort === 'oldest') {\n            orderBy = 'ORDER BY id ASC';\n          } else if (sort === 'most') {\n            orderBy = 'ORDER BY blessings DESC';\n          } else if (sort === 'least') {\n            orderBy = 'ORDER BY blessings ASC';\n          }\n          \n          query += ` ${orderBy}`;\n          \n          const { results } = visibility ? \n            await db.prepare(query).bind(visibility).all() :\n            await db.prepare(query).all();\n          return new Response(JSON.stringify({ data: results }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // \u7BA1\u7406\u5458\u5220\u9664\u63A5\u53E3 - \u4E0D\u9700\u8981\u8BA4\u8BC1\n        if (method === 'DELETE') {\n          const pathParts = url.pathname.split('/');\n          const id = pathParts[pathParts.length - 1];\n          \n          if (!id || id === 'wishes') {\n            return new Response(JSON.stringify({ error: '\u7F3A\u5C11\u613F\u671BID' }), {\n              status: 400,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n\n          try {\n            // \u68C0\u67E5\u613F\u671B\u662F\u5426\u5B58\u5728\n            const wish = await db.prepare(`SELECT * FROM wishes WHERE id = ?`).bind(id).first();\n            \n            if (!wish) {\n              return new Response(JSON.stringify({ error: '\u613F\u671B\u4E0D\u5B58\u5728' }), {\n                status: 404,\n                headers: { 'Content-Type': 'application/json', ...corsHeaders }\n              });\n            }\n\n            // 1. \u5220\u9664\u5F15\u7528 wish \u7684\u52A0\u6301\u8BB0\u5F55\n            await db.prepare(`DELETE FROM bless_records WHERE wish_id = ?`).bind(id).run();\n\n            // 2. \u5220\u9664 wish \u672C\u8EAB\n            await db.prepare(`DELETE FROM wishes WHERE id = ?`).bind(id).run();\n\n            return new Response(JSON.stringify({ success: true }), {\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          } catch (err) {\n            return new Response(JSON.stringify({ error: err.message }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n        }\n\n        return new Response('Method Not Allowed', { status: 405, headers: corsHeaders });\n      } catch (err) {\n        return new Response(JSON.stringify({ error: 'Internal Error: ' + err.message }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u8BC5\u5492\u6C60\u63A5\u53E3\n    if (url.pathname === '/api/curse') {\n      try {\n        if (method === 'POST') {\n          const data = await request.json();\n          const {\n            user_name, target_description, content, type, visibility,\n            user_id, solar_date\n          } = data;\n\n          await db.prepare(`\n            INSERT INTO curse (user_name, target_description, content, type, visibility, user_id, solar_date)\n            VALUES (?, ?, ?, ?, ?, ?, ?)\n          `).bind(user_name, target_description, content, type, visibility, user_id, solar_date).run();\n\n          return new Response(JSON.stringify({ success: true }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        if (method === 'GET') {\n          // \u83B7\u53D6\u67E5\u8BE2\u53C2\u6570\n          const visibility = url.searchParams.get('visibility') || 'public';\n          const sort = url.searchParams.get('sort') || 'newest';\n          \n          let query = `SELECT * FROM curse WHERE visibility = ?`;\n          let orderBy = 'ORDER BY id DESC';\n          \n          if (sort === 'oldest') {\n            orderBy = 'ORDER BY id ASC';\n          } else if (sort === 'most') {\n            orderBy = 'ORDER BY blessings DESC';\n          } else if (sort === 'least') {\n            orderBy = 'ORDER BY blessings ASC';\n          }\n          \n          query += ` ${orderBy}`;\n          \n          const { results } = await db.prepare(query).bind(visibility).all();\n          return new Response(JSON.stringify({ data: results }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n        }\n\n        // \u7BA1\u7406\u5458\u5220\u9664\u63A5\u53E3 - \u4E0D\u9700\u8981\u8BA4\u8BC1\n        if (method === 'DELETE') {\n          const pathParts = url.pathname.split('/');\n          const id = pathParts[pathParts.length - 1];\n          \n          if (!id || id === 'curse') {\n            return new Response(JSON.stringify({ error: '\u7F3A\u5C11\u8BC5\u5492ID' }), {\n              status: 400,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n\n          try {\n            // \u68C0\u67E5\u8BC5\u5492\u662F\u5426\u5B58\u5728\n            const curse = await db.prepare(`SELECT * FROM curse WHERE id = ?`).bind(id).first();\n            \n            if (!curse) {\n              return new Response(JSON.stringify({ error: '\u8BC5\u5492\u4E0D\u5B58\u5728' }), {\n                status: 404,\n                headers: { 'Content-Type': 'application/json', ...corsHeaders }\n              });\n            }\n\n            // 1. \u5220\u9664\u5F15\u7528 curse \u7684\u8BB0\u5F55\n            await db.prepare(`DELETE FROM curse_records WHERE curse_id = ?`).bind(id).run();\n\n            // 2. \u5220\u9664 curse \u672C\u8EAB\n            await db.prepare(`DELETE FROM curse WHERE id = ?`).bind(id).run();\n\n            return new Response(JSON.stringify({ success: true }), {\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          } catch (err) {\n            return new Response(JSON.stringify({ error: err.message }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n        }\n\n        return new Response('Method Not Allowed', { status: 405, headers: corsHeaders });\n      } catch (err) {\n        return new Response(JSON.stringify({ error: 'Internal Error: ' + err.message }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u5220\u9664\u613F\u671B\u63A5\u53E3\uFF08\u652F\u6301\u7BA1\u7406\u5458\u548C\u7528\u6237\u5220\u9664\uFF09\n    if (url.pathname.startsWith('/api/wishes/') && method === 'DELETE') {\n      const id = url.pathname.split('/').pop();\n\n      try {\n        // \u68C0\u67E5\u662F\u5426\u6709\u8BA4\u8BC1\u4FE1\u606F\n        const authHeader = request.headers.get('Authorization');\n        \n        if (authHeader && authHeader.startsWith('Bearer ')) {\n          // \u6709\u8BA4\u8BC1\u4FE1\u606F\uFF0C\u6309\u7528\u6237\u5220\u9664\u903B\u8F91\u5904\u7406\n          const token = authHeader.substring(7);\n          const decoded = verifyJWT(token, env.JWT_SECRET);\n          if (!decoded) {\n            return new Response(JSON.stringify({ error: '\u65E0\u6548\u7684\u8BA4\u8BC1\u4EE4\u724C' }), {\n              status: 401,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n\n          // \u68C0\u67E5\u613F\u671B\u662F\u5426\u5B58\u5728\u4E14\u5C5E\u4E8E\u5F53\u524D\u7528\u6237\n          const wish = await db.prepare(`SELECT * FROM wishes WHERE id = ? AND user_id = ?`)\n            .bind(id, decoded.id).first();\n          \n          if (!wish) {\n            return new Response(JSON.stringify({ error: '\u613F\u671B\u4E0D\u5B58\u5728\u6216\u65E0\u6743\u9650\u5220\u9664' }), {\n              status: 404,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n        } else {\n          // \u65E0\u8BA4\u8BC1\u4FE1\u606F\uFF0C\u6309\u7BA1\u7406\u5458\u5220\u9664\u903B\u8F91\u5904\u7406\n          const wish = await db.prepare(`SELECT * FROM wishes WHERE id = ?`).bind(id).first();\n          \n          if (!wish) {\n            return new Response(JSON.stringify({ error: '\u613F\u671B\u4E0D\u5B58\u5728' }), {\n              status: 404,\n              headers: { 'Content-Type': 'application/json', ...corsHeaders }\n            });\n          }\n        }\n\n        // 1. \u5220\u9664\u5F15\u7528 wish \u7684\u52A0\u6301\u8BB0\u5F55\n        await db.prepare(`DELETE FROM bless_records WHERE wish_id = ?`).bind(id).run();\n\n        // 2. \u5220\u9664\u5F15\u7528 wish \u7684\u8FD8\u613F\u8BB0\u5F55\n        await db.prepare(`DELETE FROM fulfillments WHERE wish_id = ?`).bind(id).run();\n\n        // 3. \u5220\u9664 wish \u672C\u8EAB\n        await db.prepare(`DELETE FROM wishes WHERE id = ?`).bind(id).run();\n\n        return new Response(JSON.stringify({ success: true }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      } catch (err) {\n        return new Response(JSON.stringify({ error: err.message }), {\n          status: 500,\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n    }\n\n    // \u83B7\u53D6\u7528\u6237\u613F\u671B\u63A5\u53E3\nif (url.pathname === '/api/user/wishes' && method === 'GET') {\n    try {\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), {\n                status: 401,\n                headers: corsHeaders\n            });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload || !payload.id) {\n            return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), {\n                status: 401,\n                headers: corsHeaders\n            });\n        }\n        \n        const wishes = await db.prepare(\n            `SELECT * FROM wishes WHERE user_id = ? ORDER BY created_at DESC`\n        ).bind(payload.id).all();\n        \n        return new Response(JSON.stringify(wishes.results || []), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n        \n    } catch (error) {\n        return new Response(JSON.stringify({ \n            error: '\u670D\u52A1\u5668\u9519\u8BEF',\n            message: error.message \n        }), {\n            status: 500,\n            headers: corsHeaders\n        });\n    }\n}\n\n      // \u6570\u636E\u7EDF\u8BA1\u63A5\u53E3\n            if (url.pathname === '/api/stats' && method === 'GET') {\n            try {\n              const today = new Date().toISOString().slice(0, 10);\n              \n              // \u4F7F\u7528 Promise.all \u5E76\u884C\u6267\u884C\u67E5\u8BE2\n              const [\n                newWishesResult,\n                blessingsResult,\n                fulfilledResult,\n                distributionResult\n              ] = await Promise.all([\n                // \u4ECA\u65E5\u65B0\u589E\u613F\u671B\uFF08\u4E0D\u53D8\uFF09\n                db.prepare(\n                  `SELECT COUNT(*) as count FROM wishes \n                  WHERE DATE(created_at) = ?`\n                ).bind(today).all(),\n                \n                // \u4ECA\u65E5\u52A0\u6301\u6B21\u6570\uFF08\u4E0D\u53D8\uFF09\n                db.prepare(\n                  `SELECT COUNT(*) as total \n                  FROM bless_records\n                  WHERE DATE(last_blessed_at/1000, 'unixepoch') = ?`\n                ).bind(today).all(),\n                \n                // \u4FEE\u6539\u70B9\uFF1A\u7EDF\u8BA1\u6240\u6709\u5DF2\u8FD8\u613F\u8BB0\u5F55\uFF08\u79FB\u9664\u4E86\u65E5\u671F\u6761\u4EF6\uFF09\n                db.prepare(\n                  `SELECT COUNT(*) as count FROM wishes \n                  WHERE is_fulfilled = 1 \n                  AND DATE(fulfilled_at, 'unixepoch') = ?`\n                ).bind(today).all(),\n                \n                // \u613F\u671B\u7C7B\u578B\u5206\u5E03\uFF08\u4E0D\u53D8\uFF09\n                db.prepare(\n                  `SELECT type, COUNT(*) as count FROM wishes GROUP BY type`\n                ).all()\n              ]);\n\n              // \u683C\u5F0F\u5316\u8FD4\u56DE\u6570\u636E\n              const responseData = {\n                today: {\n                  newWishes: newWishesResult.results[0]?.count || 0,\n                  blessings: blessingsResult.results[0]?.total || 0,\n                  fulfilled: fulfilledResult.results[0]?.count || 0  // \u73B0\u5728\u4F1A\u8FD4\u56DE\u6240\u6709\u5DF2\u8FD8\u613F\u6570\u91CF\n                },\n                distribution: {}\n              };\n\n              // \u5904\u7406\u613F\u671B\u7C7B\u578B\u5206\u5E03\u6570\u636E\n              distributionResult.results.forEach(({ type, count }) => {\n                responseData.distribution[type] = count;\n              });\n\n              return new Response(JSON.stringify(responseData), {\n                headers: { \n                  'Content-Type': 'application/json', \n                  ...corsHeaders \n                }\n              });\n\n            } catch (error) {\n              console.error('\u7EDF\u8BA1\u63A5\u53E3\u9519\u8BEF:', error);\n              return new Response(JSON.stringify({\n                error: '\u83B7\u53D6\u7EDF\u8BA1\u5931\u8D25',\n                details: error.message\n              }), {\n                status: 500,\n                headers: { 'Content-Type': 'application/json', ...corsHeaders }\n              });\n            }\n          }\n    \n    // --- \u4FEE\u590D\u540E\u7684\u52A0\u6301\u63A5\u53E3\uFF08\u6DFB\u52A0\u6BCF\u5C0F\u65F6\u9650\u5236\u548C25\u6B21\u4E0A\u9650\uFF09---\n    if (url.pathname.startsWith('/api/bless/') && method === 'POST') {\n      try {\n        const parts = url.pathname.split('/');\n        const wishId = parts[parts.length - 1];\n\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader?.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), { status: 401, headers: corsHeaders });\n        }\n\n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload || !payload.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u7684\u7528\u6237\u4FE1\u606F' }), { status: 401, headers: corsHeaders });\n        }\n\n        const userId = payload.id;\n\n        // \u68C0\u67E5\u613F\u671B\u662F\u5426\u5B58\u5728\n        const wish = await db.prepare(`SELECT * FROM wishes WHERE id = ?`).bind(wishId).first();\n        if (!wish) {\n          return new Response(JSON.stringify({ error: '\u613F\u671B\u672A\u627E\u5230' }), { status: 404, headers: corsHeaders });\n        }\n\n        // \u68C0\u67E5\u662F\u5426\u5DF2\u8FBE\u523025\u6B21\u52A0\u6301\u4E0A\u9650\n        const totalBlessings = await db.prepare(`SELECT SUM(count) as total FROM bless_records WHERE wish_id = ?`)\n          .bind(wishId).first();\n        const currentBlessings = totalBlessings?.total || 0;\n\n        if (currentBlessings >= 25) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: '\u8BE5\u613F\u671B\u5DF2\u8FBE\u5230\u6700\u9AD8\u52A0\u6301\u6B21\u6570(25\u6B21)',\n            code: 400\n          }), {\n            status: 400,\n            headers: corsHeaders\n          });\n        }\n\n        // \u4E00\u5C0F\u65F6\u52A0\u6301\u9650\u5236\n        const oneHourAgo = Date.now() - 3600000;\n        const recentBless = await db.prepare(\n          `SELECT last_blessed_at FROM bless_records WHERE wish_id = ? AND user_id = ? AND last_blessed_at > ? LIMIT 1`\n        ).bind(wishId, userId, oneHourAgo).first();\n\n        if (recentBless) {\n          const nextBlessTime = new Date(recentBless.last_blessed_at + 3600000);\n          return new Response(JSON.stringify({\n            success: false,\n            error: '\u6BCF\u5C0F\u65F6\u53EA\u80FD\u5BF9\u540C\u4E00\u613F\u671B\u52A0\u6301\u4E00\u6B21',\n            nextBlessTime: nextBlessTime.toISOString(),\n            code: 429\n          }), {\n            status: 429,\n            headers: corsHeaders\n          });\n        }\n\n        // \u66F4\u65B0\u6216\u63D2\u5165\u52A0\u6301\u8BB0\u5F55\n        const now = Date.now();\n        const existingBless = await db.prepare(\n          `SELECT count FROM bless_records WHERE wish_id = ? AND user_id = ?`\n        ).bind(wishId, userId).first();\n\n        if (existingBless) {\n          await db.prepare(`UPDATE bless_records SET count = count + 1, last_blessed_at = ? WHERE wish_id = ? AND user_id = ?`)\n            .bind(now, wishId, userId).run();\n        } else {\n          await db.prepare(`INSERT INTO bless_records (wish_id, user_id, count, first_blessed_at, last_blessed_at) VALUES (?, ?, 1, ?, ?)`)\n            .bind(wishId, userId, now, now).run();\n        }\n\n        // \u91CD\u65B0\u8BA1\u7B97\u603B\u52A0\u6301\u6B21\u6570\uFF08\u786E\u4FDD\u4E0D\u8D85\u8FC725\uFF09\n        const newTotalBlessings = Math.min((currentBlessings + 1), 25);\n        const level = newTotalBlessings >= 20 ? 5 : \n                    newTotalBlessings >= 15 ? 4 : \n                    newTotalBlessings >= 10 ? 3 : \n                    newTotalBlessings >= 5 ? 2 : 1;\n\n        await db.prepare(`UPDATE wishes SET blessings = ?, level = ? WHERE id = ?`)\n          .bind(newTotalBlessings, level, wishId).run();\n\n        return new Response(JSON.stringify({\n          success: true,\n          blessings: newTotalBlessings,\n          level,\n          isMax: newTotalBlessings >= 25  // \u65B0\u589E\u5B57\u6BB5\uFF0C\u8868\u793A\u662F\u5426\u8FBE\u5230\u4E0A\u9650\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n\n      } catch (err) {\n        return new Response(JSON.stringify({\n          success: false,\n          error: '\u670D\u52A1\u5668\u9519\u8BEF: ' + err.message,\n          stack: err.stack\n        }), {\n          status: 500,\n          headers: corsHeaders\n        });\n      }\n    }\n\n        // \u7ACB\u5373\u66F4\u65B0\u8FD8\u613F\u72B6\u6001\u63A5\u53E3\n        if (url.pathname.startsWith('/api/wishes/') && url.pathname.endsWith('/fulfill') && method === 'POST') {\n          try {\n            const wishId = url.pathname.split('/')[3];\n            \n            // \u9A8C\u8BC1JWT\n            const authHeader = request.headers.get('Authorization');\n            if (!authHeader || !authHeader.startsWith('Bearer ')) {\n              return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), {\n                status: 401,\n                headers: corsHeaders\n              });\n            }\n            \n            const token = authHeader.split(' ')[1];\n            let payload;\n            try {\n              payload = verifyJWT(token);\n            } catch (e) {\n              return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), {\n                status: 401,\n                headers: corsHeaders\n              });\n            }\n\n            // \u66F4\u65B0is_fulfilled\u5B57\u6BB5\u548Cfulfilled_at\u65F6\u95F4\u6233\n            await db.prepare(\n              `UPDATE wishes \n              SET is_fulfilled = 1, \n                  fulfilled_at = strftime('%s','now') \n              WHERE id = ?`\n            ).bind(wishId).run();\n\n            return new Response(JSON.stringify({ \n              success: true,\n              message: '\u8FD8\u613F\u72B6\u6001\u5DF2\u66F4\u65B0'\n            }), {\n              headers: { \n                'Content-Type': 'application/json', \n                ...corsHeaders \n              }\n            });\n            \n          } catch (error) {\n            return new Response(JSON.stringify({ \n              success: false,\n              error: '\u670D\u52A1\u5668\u9519\u8BEF: ' + error.message,\n              code: 500\n            }), { \n              status: 500,\n              headers: corsHeaders\n            });\n          }\n        }\n\n       // \u8FD8\u613F\u63A5\u53E3 - \u589E\u5F3A\u7248\n      if (url.pathname === '/api/wishes/fulfill' && method === 'POST') {\n        try {\n          console.log('[API] \u6536\u5230\u8FD8\u613F\u8BF7\u6C42');\n          const { wishId, amount, paymentMethod } = await request.json();\n          \n          // 1. \u9A8C\u8BC1\u53C2\u6570\n          if (!wishId || !amount || !paymentMethod) {\n            return new Response(JSON.stringify({\n              success: false,\n              error: 'MISSING_PARAMS'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          // 2. \u79FB\u9664\u5BF9\u662F\u5426\u5DF2\u8FD8\u613F\u7684\u68C0\u67E5\uFF0C\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\n          // \u5141\u8BB8\u7528\u6237\u5BF9\u540C\u4E00\u4E2A\u613F\u671B\u591A\u6B21\u8FD8\u613F\n          \n          // 3. \u63D2\u5165\u8FD8\u613F\u8BB0\u5F55\n          const timestamp = Math.floor(Date.now() / 1000);\n          const result = await db.prepare(\n            `INSERT INTO fulfillments \n            (wish_id, amount, payment_method, created_at)\n            VALUES (?, ?, ?, ?)`\n          ).bind(wishId, amount, paymentMethod, timestamp).run();\n          \n          if (!result.success) {\n            throw new Error('\u6570\u636E\u5E93\u64CD\u4F5C\u5931\u8D25');\n          }\n          \n          return new Response(JSON.stringify({\n            success: true,\n            fulfillmentId: result.meta.last_row_id\n          }), { headers: corsHeaders });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: 'SERVER_ERROR',\n            message: error.message\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n\n      // \u652F\u4ED8\u9A8C\u8BC1\u63A5\u53E3 - \u589E\u5F3A\u7248\n      if (url.pathname === '/api/payments/verify' && method === 'POST') {\n        try {\n          const { orderId, wishId, amount } = await request.json();\n          \n          // 1. \u8C03\u7528zpay\u5B98\u65B9\u8BA2\u5355\u67E5\u8BE2\u63A5\u53E3\n          const verifyResponse = await fetch(`https://zpayz.cn/api/order/query?orderId=${orderId}`, {\n            headers: { 'Authorization': 'PID '+env.ZPAY_KEY }\n          });\n          \n          const { status, actualAmount } = await verifyResponse.json();\n          \n          // 2. \u9A8C\u8BC1\u652F\u4ED8\u72B6\u6001\u548C\u91D1\u989D\n          if (status !== 'paid') {\n            return new Response(JSON.stringify({\n              success: false,\n              error: 'PAYMENT_NOT_COMPLETED'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          if (parseFloat(actualAmount) !== parseFloat(amount)) {\n            return new Response(JSON.stringify({\n              success: false,\n              error: 'AMOUNT_MISMATCH'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          // 3. \u8BB0\u5F55\u5230fulfillments\u8868\n          const fulfillmentResult = await db.prepare(\n            `INSERT INTO fulfillments \n            (wish_id, amount, payment_method, created_at)\n            VALUES (?, ?, ?, ?)`\n          ).bind(wishId, amount, 'zpay', Math.floor(Date.now() / 1000)).run();\n          \n          if (!fulfillmentResult.success) {\n            throw new Error('\u8BB0\u5F55\u8FD8\u613F\u5931\u8D25');\n          }\n\n      // \u5145\u503C\u63A5\u53E3\n      if (url.pathname === '/api/recharge' && method === 'POST') {\n        try {\n          const authHeader = request.headers.get('Authorization');\n          if (!authHeader || !authHeader.startsWith('Bearer ')) {\n            return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), {\n              status: 401,\n              headers: corsHeaders\n            });\n          }\n          \n          const token = authHeader.split(' ')[1];\n          const payload = verifyJWT(token, env.JWT_SECRET);\n          if (!payload || !payload.id) {\n            return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), {\n              status: 401,\n              headers: corsHeaders\n            });\n          }\n          \n          const { amount, paymentMethod, orderId } = await request.json();\n          \n          if (!orderId) {\n            return new Response(JSON.stringify({ \n              error: '\u7F3A\u5C11\u8BA2\u5355\u53F7',\n              code: 'MISSING_ORDER_ID'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          // 1. \u9A8C\u8BC1\u652F\u4ED8\u8BA2\u5355\n          const verifyResponse = await fetch(`https://zpayz.cn/api/order/query?orderId=${orderId}`, {\n            headers: { 'Authorization': 'PID '+env.ZPAY_KEY }\n          });\n          \n          const { status, actualAmount } = await verifyResponse.json();\n          \n          if (status !== 'paid') {\n            return new Response(JSON.stringify({\n              success: false,\n              error: 'PAYMENT_NOT_COMPLETED'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          if (parseFloat(actualAmount) !== parseFloat(amount)) {\n            return new Response(JSON.stringify({\n              success: false,\n              error: 'AMOUNT_MISMATCH'\n            }), { status: 400, headers: corsHeaders });\n          }\n          \n          // 2. \u8BB0\u5F55\u5145\u503C\u8BB0\u5F55\n          const timestamp = Math.floor(Date.now() / 1000);\n          await db.prepare(\n            `INSERT INTO recharges \n            (user_id, amount, payment_method, order_id, created_at)\n            VALUES (?, ?, ?, ?, ?)`\n          ).bind(payload.id, amount, paymentMethod, orderId, timestamp).run();\n          \n          // 3. \u66F4\u65B0\u7528\u6237\u4F59\u989D\n          await db.prepare(\n            `UPDATE users SET balance = COALESCE(balance, 0) + ? WHERE id = ?`\n          ).bind(amount, payload.id).run();\n          \n          // 4. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u7528\u6237\u4FE1\u606F\n          const user = await db.prepare(\n            `SELECT id, name, balance FROM users WHERE id = ?`\n          ).bind(payload.id).first();\n          \n          return new Response(JSON.stringify({\n            success: true,\n            user: {\n              id: user.id,\n              name: user.name,\n              balance: user.balance\n            }\n          }), {\n            headers: { 'Content-Type': 'application/json', ...corsHeaders }\n          });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: 'SERVER_ERROR',\n            message: error.message\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n          \n          // 4. \u4ECEwishes\u8868\u4E2D\u5220\u9664\u613F\u671B\n          const deleteResult = await db.prepare(\n            `DELETE FROM wishes WHERE id = ?`\n          ).bind(wishId).run();\n          \n          return new Response(JSON.stringify({\n            success: true,\n            fulfillmentId: fulfillmentResult.meta.last_row_id\n          }), { headers: corsHeaders });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: 'VERIFICATION_FAILED',\n            message: error.message\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n\n      // \u72B6\u6001\u68C0\u67E5\u63A5\u53E3 - \u589E\u5F3A\u7248\uFF08\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\uFF09\n      if (url.pathname === '/api/wishes/check' && method === 'GET') {\n        try {\n          const wishId = url.searchParams.get('wishId');\n          \n          // \u9996\u5148\u68C0\u67E5\u613F\u671B\u662F\u5426\u5B58\u5728\n          const wishExists = await db.prepare(\n            `SELECT id FROM wishes WHERE id = ?`\n          ).bind(wishId).first();\n          \n          // \u5982\u679C\u613F\u671B\u4E0D\u5B58\u5728\uFF0C\u76F4\u63A5\u8FD4\u56DE\n          if (!wishExists) {\n            return new Response(JSON.stringify({\n              fulfilled: false,\n              exists: false\n            }), { headers: corsHeaders });\n          }\n          \n          // \u4E0D\u518D\u68C0\u67E5\u662F\u5426\u5DF2\u8FD8\u613F\uFF0C\u59CB\u7EC8\u8FD4\u56DE\u672A\u8FD8\u613F\u72B6\u6001\uFF0C\u5141\u8BB8\u591A\u6B21\u8FD8\u613F\n          return new Response(JSON.stringify({\n            fulfilled: false, // \u59CB\u7EC8\u8FD4\u56DE\u672A\u8FD8\u613F\uFF0C\u5141\u8BB8\u91CD\u590D\u8FD8\u613F\n            exists: true\n          }), { headers: corsHeaders });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            fulfilled: false,\n            exists: false,\n            error: error.message\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n\n      // \u540E\u7AEFAPI (/api/payments/verify)\n      if (url.pathname === '/api/payments/verify' && method === 'GET') {\n        const orderId = url.searchParams.get('orderId');\n        \n        // 1. \u8C03\u7528zpay\u5B98\u65B9\u8BA2\u5355\u67E5\u8BE2\u63A5\u53E3\n        const zpayResponse = await fetch(`https://zpayz.cn/api/order/query?orderId=${orderId}`, {\n          headers: { 'Authorization': 'PID '+env.ZPAY_KEY }\n        });\n        \n        // 2. \u89E3\u6790\u652F\u4ED8\u72B6\u6001\n        const { status, amount } = await zpayResponse.json();\n        \n        // 3. \u8FD4\u56DE\u6807\u51C6\u5316\u72B6\u6001\n        return new Response(JSON.stringify({\n          status: status === 'paid' ? 'success' : 'pending'\n        }), { headers: corsHeaders });\n      }\n\n      // \u652F\u4ED8\u72B6\u6001\u68C0\u67E5\u63A5\u53E3\n      if (url.pathname === '/api/payments/status' && method === 'GET') {\n        try {\n          const wishId = url.searchParams.get('wishId');\n          const fulfillment = await db.prepare(\n            `SELECT id FROM fulfillments WHERE wish_id = ?`\n          ).bind(wishId).first();\n\n          if (fulfillment) {\n            return new Response(JSON.stringify({\n              status: 'success',\n              fulfillmentId: fulfillment.id\n            }), { headers: corsHeaders });\n          }\n\n          return new Response(JSON.stringify({\n            status: 'pending',\n            message: '\u652F\u4ED8\u5904\u7406\u4E2D'\n          }), { headers: corsHeaders });\n        } catch (error) {\n          return new Response(JSON.stringify({\n            status: 'error',\n            message: '\u67E5\u8BE2\u5931\u8D25'\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n\n    // \u5145\u503C\u63A5\u53E3 - \u5E94\u8BE5\u653E\u5728\u6587\u4EF6\u9876\u5C42\u8DEF\u7531\u4E2D\uFF0C\u4E0E\u5176\u4ED6\u8DEF\u7531\u5E76\u5217\n    if (url.pathname === '/api/recharge' && method === 'POST') {\n      try {\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), {\n            status: 401,\n            headers: corsHeaders\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload || !payload.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), {\n            status: 401,\n            headers: corsHeaders\n          });\n        }\n        \n        const { amount, paymentMethod } = await request.json();\n        \n        // \u751F\u6210\u8BA2\u5355\u53F7\n        const orderId = `R${Date.now()}${Math.floor(Math.random()*1000)}`;\n        \n        // 1. \u8BB0\u5F55\u5145\u503C\u8BB0\u5F55\n        const timestamp = Math.floor(Date.now() / 1000);\n        await db.prepare(\n          `INSERT INTO recharges \n          (order_id, user_id, amount, payment_method, created_at)\n          VALUES (?, ?, ?, ?, ?)`\n        ).bind(orderId, payload.id, amount, paymentMethod, timestamp).run();\n        \n        // 2. \u66F4\u65B0\u7528\u6237\u4F59\u989D\n        await db.prepare(\n          `UPDATE users SET balance = COALESCE(balance, 0) + ? WHERE id = ?`\n        ).bind(amount, payload.id).run();\n        \n        // 3. \u83B7\u53D6\u66F4\u65B0\u540E\u7684\u7528\u6237\u4FE1\u606F\n        const user = await db.prepare(\n          `SELECT id, name, balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        return new Response(JSON.stringify({\n          success: true,\n          orderId, // \u8FD4\u56DE\u8BA2\u5355\u53F7\u7ED9\u524D\u7AEF\n          user: {\n            id: user.id,\n            name: user.name,\n            balance: user.balance\n          }\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n        \n      } catch (error) {\n        return new Response(JSON.stringify({\n          success: false,\n          error: 'SERVER_ERROR',\n          message: error.message\n        }), { status: 500, headers: corsHeaders });\n      }\n    }\n    \n    // \u521B\u5EFA\u5145\u503C\u8BA2\u5355\uFF08\u4E0D\u4FEE\u6539\u4F59\u989D\uFF09\n      if (url.pathname === '/api/recharge/orders' && method === 'POST') {\n        try {\n          const { amount, paymentMethod } = await request.json();\n          const authHeader = request.headers.get('Authorization');\n          const token = authHeader.split(' ')[1];\n          const payload = verifyJWT(token, env.JWT_SECRET);\n          \n          // \u751F\u6210\u552F\u4E00\u8BA2\u5355\u53F7\n          const orderId = `R${Date.now()}${Math.floor(Math.random()*1000)}`;\n          \n          // \u8BB0\u5F55\u5230\u4E34\u65F6\u8BA2\u5355\u8868\uFF08\u72B6\u6001\u4E3Apending\uFF09\n          await db.prepare(\n            `INSERT INTO recharge_orders \n            (order_id, user_id, amount, payment_method, status, created_at)\n            VALUES (?, ?, ?, ?, ?, ?)`\n          ).bind(\n            orderId,\n            payload.id,\n            amount,\n            paymentMethod,\n            'pending',\n            Math.floor(Date.now() / 1000)\n          ).run();\n          \n          return new Response(JSON.stringify({\n            orderId,\n            amount,\n            paymentMethod\n          }), { headers: corsHeaders });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            error: 'CREATE_ORDER_FAILED',\n            message: error.message\n          }), { status: 500, headers: corsHeaders });\n        }\n      }\n\n      if (url.pathname === '/api/recharge/notify' && method === 'POST') {\n        try {\n          // \u83B7\u53D6\u901A\u77E5\u53C2\u6570\n          const params = Object.fromEntries(await request.formData());\n          \n          // \u9A8C\u8BC1\u7B7E\u540D\n          const sign = params.sign;\n          const sortedParams = Object.keys(params)\n            .filter(k => k !== 'sign' && params[k] !== '')\n            .sort()\n            .map(k => `${k}=${params[k]}`)\n            .join('&');\n          const calculatedSign = CryptoJS.MD5(sortedParams + env.ZPAY_KEY).toString();\n          \n          if (sign !== calculatedSign) {\n            return new Response('FAIL', { status: 400 });\n          }\n          \n          // \u67E5\u8BE2\u8BA2\u5355\n          const order = await db.prepare(\n            `SELECT * FROM recharge_orders WHERE order_id = ?`\n          ).bind(params.out_trade_no).first();\n\n          if (!order) {\n            return new Response('ORDER_NOT_FOUND', { status: 404 });\n          }\n\n          // \u4F7F\u7528\u4E8B\u52A1\u786E\u4FDD\u6240\u6709\u6570\u636E\u5E93\u64CD\u4F5C\u539F\u5B50\u6027\n          const batchResult = await db.batch([\n            db.prepare(\n              `UPDATE recharge_orders SET status = 'paid' WHERE order_id = ?`\n            ).bind(params.out_trade_no),\n            \n            db.prepare(\n              `UPDATE users SET balance = balance + ? WHERE id = ?`\n            ).bind(params.money, order.user_id),\n            \n            db.prepare(\n              `INSERT INTO recharges \n              (order_id, user_id, amount, payment_method, created_at)\n              VALUES (?, ?, ?, 'zpay', ?)`\n            ).bind(\n              params.out_trade_no,\n              order.user_id,\n              params.money,\n              Math.floor(Date.now() / 1000)\n            ),\n            \n            db.prepare(\n              `INSERT INTO transactions \n              (user_id, amount, type, reference_id, created_at)\n              VALUES (?, ?, 'recharge', ?, ?)`\n            ).bind(\n              order.user_id,\n              params.money,\n              params.out_trade_no,\n              Math.floor(Date.now() / 1000)\n            )\n          ]);\n          \n          // \u68C0\u67E5\u6240\u6709\u66F4\u65B0\u662F\u5426\u6210\u529F\n          if (!batchResult.every(r => r.success)) {\n            console.error('\u6570\u636E\u5E93\u66F4\u65B0\u5931\u8D25:', batchResult);\n            throw new Error('\u6570\u636E\u5E93\u66F4\u65B0\u5931\u8D25');\n          }\n          \n          // \u8BB0\u5F55\u8BE6\u7EC6\u65E5\u5FD7\n          console.log('\u5145\u503C\u6210\u529F\u8BB0\u5F55:', {\n            orderId: params.out_trade_no,\n            userId: order.user_id,\n            amount: params.money,\n            balanceUpdated: batchResult[1].success,\n            rechargeCreated: batchResult[2].success,\n            transactionCreated: batchResult[3].success,\n            timestamp: new Date().toISOString()\n          });\n\n          return new Response('SUCCESS');\n\n        } catch (err) {\n          console.error('\u901A\u77E5\u5904\u7406\u5931\u8D25:', err);\n          return new Response('ERROR', { status: 500 });\n        }\n      }\n\n      // \u652F\u4ED8\u72B6\u6001\u67E5\u8BE2\n      if (url.pathname === '/api/recharge/status' && method === 'GET') {\n        const orderId = url.searchParams.get('orderId');\n        \n        const order = await db.prepare(\n          `SELECT status FROM recharge_orders WHERE order_id = ?`\n        ).bind(orderId).first();\n        \n        return new Response(JSON.stringify({\n          status: order?.status || 'not_found'\n        }), { headers: corsHeaders });\n      }\n\n    // \u83B7\u53D6\u7528\u6237\u4F59\u989D\n      if (url.pathname === '/api/user/balance' && method === 'GET') {\n        const authHeader = request.headers.get('Authorization');\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\n          return new Response(JSON.stringify({ error: '\u672A\u6388\u6743' }), {\n            status: 401,\n            headers: corsHeaders\n          });\n        }\n        \n        const token = authHeader.split(' ')[1];\n        const payload = verifyJWT(token, env.JWT_SECRET);\n        if (!payload || !payload.id) {\n          return new Response(JSON.stringify({ error: '\u65E0\u6548\u4EE4\u724C' }), {\n            status: 401,\n            headers: corsHeaders\n          });\n        }\n        \n        const user = await db.prepare(\n          `SELECT balance FROM users WHERE id = ?`\n        ).bind(payload.id).first();\n        \n        return new Response(JSON.stringify({\n          balance: user?.balance || 0\n        }), {\n          headers: { 'Content-Type': 'application/json', ...corsHeaders }\n        });\n      }\n      \n      // \u5176\u4ED6\u8DEF\u5F84404\n      return new Response('Not Found', { status: 404, headers: corsHeaders });\n  }\n};\n\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/src/index.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/.wrangler/tmp/bundle-zmDFkT/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/.wrangler/tmp/bundle-zmDFkT/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/Owen/Desktop/mybazi/fivelements/bazi-backend/.wrangler/tmp/bundle-zmDFkT/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["amount", "orderId", "verifyResponse", "status", "actualAmount"]
}
